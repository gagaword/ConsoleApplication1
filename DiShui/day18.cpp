#include<iostream>

char array[] = {
	0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x07,0x09,
	0x00,0x20,0x10,0x03,0x03,0x0C,0x00,0x00,0x44,0x00,
	0x00,0x33,0x00,0x47,0x0C,0x0E,0x00,0x0D,0x00,0x11,
	0x00,0x00,0x00,0x02,0x64,0x00,0x00,0x00,0xAA,0x00,
	0x00,0x00,0x64,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x02,0x00,0x74,0x0F,0x41,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x0A,0x00,
	0x00,0x02,0x74,0x0F,0x41,0x00,0x06,0x08,0x00,0x00,
	0x00,0x00,0x00,0x64,0x00,0x0F,0x00,0x00,0x0D,0x00,
	0x00,0x00,0x23,0x00,0x00,0x64,0x00,0x00,0x64,0x00
};

//一维数组指针访问一维数组
void fun1()
{
	int array[] = { 1,2,3,4,3 };
	int(*a)[4] = (int(*)[4]) & array;
	printf("%d\n", *(*(a)));
	printf("%d\n", *(*(a) + 1));

	int(*b)[2] = (int(*)[2]) & array;
	printf("%d\n", *(*(b + 1) + 1));
	printf("%d\n", *(*(b + 2)));
}

//一维数组指针访问二维数组
void fun2()
{
	int array[2][3] = {
		{1,2,3},
		{4,5,6}
	};
	int(*a)[1] = (int(*)[1]) & array;
	printf("%d\n", *(*(a) + 2));
	printf("%d\n", *(*(a + 4) + 1));

	int(*aa)[5] = (int(*)[5]) & array;
	printf("%d\n", *(*(aa)));
	printf("%d\n", *(*(aa) + 1));

}

//一维数组指针访问三维数组
void fun3()
{
	int array[2][3][4] = {
		{
			{1,2,3,4},
			{5,6,7,8},
			{22,33,44,55},
		},
		{
			{2,1,3,2},
			{9,1,10,9},
			{11,22,33,44},
		}
	};

	int(*ar)[5] = (int(*)[5]) & array;

	printf("%d\n", *(*(ar))); // 1
	printf("%d\n", *(*(ar) + 1) + 1); // 3


	// 为何一个结果是9，一个结果是3呢
	// 初看确实有点无厘头，因为通过1，2，1去查表的话不可能查到9，
	// 细看才知道缘由，这个表达式最后的+1仅仅作用就是将*(*(ar + 1) + 2)取值后的结果加1，而不是在往后查1个int。
	// 我说结果怎么咋找咋不对劲呢，哎/。。。。
	// (ar + 1） + 2取值是8, 8 + 1 == 9；笑掉大牙了家人们。。。。。
	printf("%d\n", *(*(ar + 1) + 2) + 1); // 9
	// (ar + 2) + 2 == 2 2 + 1 == 3
	printf("%d\n", *(*(ar + 2) + 2) + 1); // 3

}

//二维数组指针访问一维数组
void fun4()
{
	int array[] = { 1,2,3,4,3 };
	int(*a)[1][1] = (int(*)[1][1]) & array;
	// 通过上面的坑，这里也就不难理解了。
	// *(*(*(a + 1) + 1) + 1)取到的值是4，4 + 2 = 6；
	printf("%d\n", *(*(*(a + 1) + 1) + 1) + 2);
	printf("%d\n", *(a)[0][0]);
}


void Function_2_1()
{
	int arr[15] = { 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 };

	int(*p)[2][2] = (int(*)[2][2])arr;

	

	printf("%d %d %d\n", *(*(*(p))), p[0][0][0], (*(p))[0][0]);

	printf("%d %d %d\n", *(*(*(p + 1) + 1)), p[1][1][0], (*(p + 1))[1][0]);

	printf("%d %d %d\n", *(*(*(p + 1) + 1) + 1), p[1][1][1], (*(*(p + 1) + 1))[1]);

	printf("%d %d %d\n", *(*(*(p + 2) + 1) + 2), p[2][1][2], (*(*(p + 2) + 1))[2]);
}

void Function_2_2()
{
	int arr[2][15] =
	{
		{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15},
		{21,22,23,24,25,26,27,28,29,30,31,32,33,34,35}
	};

	int(*p)[2][2] = (int(*)[2][2])arr;

	printf("%d %d %d\n", *(*(*(p))), p[0][0][0], (*(p))[0][0]);

	printf("%d %d %d\n", *(*(*(p + 1) + 1)), p[1][1][0], (*(p + 1))[1][0]);

	printf("%d %d %d\n", *(*(*(p + 1) + 1) + 1), p[1][1][1], (*(*(p + 1) + 1))[1]);

	printf("%d %d %d\n", *(*(*(p + 3) + 2) + 2), p[3][2][2], (*(*(p + 3) + 2))[2]);
}

void fun5()
{
	int(*px)[2] = (int(*)[2])&array;

	int(*py)[2][3] = (int(*)[2][3])&array;

	char(*pz)[2] = (char(*)[2]) & array;

	char(*pk)[2][3] = (char(*)[2][3]) & array;
	

	printf("%x\n", *(*(px + 0) + 0));

	printf("%x\n", *(*(px + 1) + 0));
	printf("%x\n", * (*(px + 2) + 3));

	printf("%x\n", *(*(*(py + 1) + 2) + 3));

	printf("%x\n", *(*(pz + 2) + 3));

	printf("%x\n", *(*(*(pk + 2) + 3) + 4));


}

int main()
{
	fun1();
	printf("--------------------\n");
	fun2();
	printf("--------------------\n");
	fun3();
	printf("--------------------\n");
	fun4();
	printf("--------------------\n");
	Function_2_1();
	printf("--------------------\n");
	Function_2_2();
	printf("--------------------\n");
	fun5();
	printf("--------------------\n");

	char(*ar)[1] = (char(*)[1]) & array;

	if (*(*(ar)) < (*(*(ar + 1))))
	{
		printf("<\n");
	}

	// 二维数组指针
	char(*arr)[2][3] = (char(*)[2][3])array;
	printf("%x\n", *(*(*(arr + 2) + 3) + 4));

	//3*6+2*3+5==18+6+5=29
	printf("%x\n", *(*(*(arr + 3) + 2) + 5));

	//printf("%x\n", array[29]);

	// 二维数组指针
	int(*arr)[2][3] = (int(*)[2][3])array;
	// 4*2*3*2 + 4*3*2 + 1*2 == 48 + 24 + 8 == 80
	printf("%x\n", *(*(*(arr + 2) + 2) + 2));
	printf("%x\n", array[80]);

	 //三维数组指针
	int(*arr)[2][3][2] = (int(*)[2][3][2])array;

	printf("%p\n", *(*(*(arr + 1) + 1) + 1) + 1);
	//00000f00
	printf("三:%x\n", *(*(*(*(arr + 1) + 1) + 1) + 1));
	//00000f00
	printf("%x\n", array[84]);		
	return 0;
}